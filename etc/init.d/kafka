#! /bin/sh
### BEGIN INIT INFO
# Provides:          kafka
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Kafka Message Broker
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin
DESC="Kafka Message Broker"
NAME=kafka
USER=kafka

PIDFILE=/var/run/$NAME.pid

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

CONFIG="/etc/kafka/server.properties"
# TODO: kafka opts
#KAFKA_OPTS="-Xmx512M -server  -Dlog4j.configuration=file:/etc/kafka/log4j.properties"
#export KAFKA_OPTS

BASEDIR="/usr/lib/kafka"

START="${BASEDIR}/bin/kafka-server-start.sh"
STOP="${BASEDIR}/bin/kafka-server-stop.sh"

KAFKA_HOME=/var/lib/kafka

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start() {
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  start-stop-daemon --start --verbose -m -b --chuid $USER --chdir $KAFKA_HOME --pidfile $PIDFILE --exec $START $CONFIG --test > /dev/null \
    || return 1

  start-stop-daemon --start --verbose -m -b --chuid $USER --chdir $KAFKA_HOME --pidfile $PIDFILE --exec $START $CONFIG \
    || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop  --retry=TERM/30/KILL/5 --pidfile $PIDFILE

  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2

  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

case "$1" in
start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;

stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;

#reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;

restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
      do_start
      case "$?" in
        0) log_end_msg 0 ;;
        1) log_end_msg 1 ;; # Old process is still running
        *) log_end_msg 1 ;; # Failed to start
      esac
      ;;
    *)
      # Failed to stop
      log_end_msg 1
      ;;
  esac
  ;;

status)
  status_of_proc -p $PIDFILE && exit 0 || exit $?
  ;;

*)
  echo $"Usage: $0 {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;

esac
